{"name":"GitHub Tutorial","tagline":"Git good on GitHub","body":"# GitHub Tutorial\r\n\r\n_by John Ruan_\r\n\r\n---\r\n## Git vs. GitHub\r\nAlthough Git and Github are similar to each other in name, they both actually accomplish different tasks. \r\nGit is used for version control and helps on your local repository, while Github is used for collaboration \r\nand cloud storage. Github does not require Git to function.\r\n\r\n---\r\n## Initial Setup\r\n####Creating a Github account\r\nBy creating a github account, you can save your files in the cloud and sharing gets much simpler. This also sets \r\nyou up for transferring/updating your local repository to a remote repository in Github.\r\n####Making a repository on Github\r\nWhat you will need to do on Github is making a repository with the **same exact name(case-sensitive)** as the file(s)\r\nyou are using. Keep in mind that one misplaced character in either repository will cause Github/Git to not recognize\r\nthat both of these repo's correlate with each other.\r\n####SSH Keys\r\nSSH stands for \"secure shell,\" and the SSH key is a long \"ID\" to clone a remote repository into your local machine.\r\n**Every key is unique**, so copying and pasting your key after typing \"git clone\" in your console will copy your files \r\nonly.\r\n####git config user.name OR user.email\r\nThe command in the header shown directly above is to basically \"mark this as _your project_.\" Doing this for 1 time\r\nwill mark the repository as yours, so you won't be needing to write it again.\r\n\r\n---\r\n## Repository Setup\r\n####\"git init\"-ing your repository\r\n`git init` will allow you to \"initialize\" your folder(s)/file(s). What this means is that the file(s) are ready to\r\nbe used by other git commands, leading you to be able to upload your file(s) to github.\r\n####\"git add\", \"git commit\", and \"git push\"\r\n`git add` will add the files specified after that command to the \"stage,\" which means the file(s) will be ready to \r\nbe commited. This leads us to `git commit`, which confirms the saves for that file, meaning it is ready to be \r\nuploaded to github with `git push`. But first, you will need to do this line of code to your repository that you \r\nwant to push  \"`git push -u origin master`\". What this line does is that it sets up the area you want to push the\r\nfiles so that simply doing `git push` will push the file(s) into Github.\r\n\r\n---\r\n## Workflow & Commands\r\n####Commands\r\n#####Below, you will find a list of commands, and what they do.\r\n* `git init` = command line start\r\n* `git status` = see which files have been edited(red) ; file(s) ready to be committed(green)\r\n* `git add file.txt` = add file(s) to be committed\r\n* `git add .` = adds current directory(\".\" can be replaced with a file name or directory command)\r\n* `git commit -a “short/specific message”` = adding the file to a \"confirmed\" state\r\n* `git log` = see your past commits\r\n* `git diff` = see differences between versions\r\n* `git push -u origin master`\r\n * push = send commits from local repo to remote repo\r\n * -u = “upstream” remembers which remote repo and branch used previously, saves it.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}